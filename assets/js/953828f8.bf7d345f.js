"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9206],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(k,i(i({ref:n},c),{},{components:t})):r.createElement(k,i({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6971:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={title:"Operator overloading, overriding",description:"Compare const to val",tags:["kotlin"],last_update:{date:new Date("2023-01-12T00:00:00.000Z")}},i=void 0,l={unversionedId:"kotlin/syntax/operator-overloading",id:"kotlin/syntax/operator-overloading",title:"Operator overloading, overriding",description:"Compare const to val",source:"@site/docs/kotlin/01-syntax/07-operator-overloading.md",sourceDirName:"kotlin/01-syntax",slug:"/kotlin/syntax/operator-overloading",permalink:"/docusaurus/docs/kotlin/syntax/operator-overloading",draft:!1,editUrl:"https://milkcoke.github.io/docusaurus/docs/docs/kotlin/01-syntax/07-operator-overloading.md",tags:[{label:"kotlin",permalink:"/docusaurus/docs/tags/kotlin"}],version:"current",lastUpdatedAt:1673481600,formattedLastUpdatedAt:"2023\ub144 1\uc6d4 12\uc77c",sidebarPosition:7,frontMatter:{title:"Operator overloading, overriding",description:"Compare const to val",tags:["kotlin"],last_update:{date:"2023-01-12T00:00:00.000Z"}},sidebar:"tutorialSidebar",previous:{title:"Backing property",permalink:"/docusaurus/docs/kotlin/syntax/Backing-Property"},next:{title:"Create a Page",permalink:"/docusaurus/docs/kotlin/create-a-page"}},p={},s=[{value:"\uc8fc\uc694 \uc5f0\uc0b0\uc790 \ubaa9\ub85d",id:"\uc8fc\uc694-\uc5f0\uc0b0\uc790-\ubaa9\ub85d",level:3},{value:"Collections.kt",id:"collectionskt",level:3},{value:"\ud83d\udcdd Summary",id:"-summary",level:2},{value:"\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529",id:"\uc5f0\uc0b0\uc790-\uc624\ubc84\ub85c\ub529",level:3},{value:"\uc5f0\uc0b0\uc790 \uc624\ubc84\ub77c\uc774\ub529",id:"\uc5f0\uc0b0\uc790-\uc624\ubc84\ub77c\uc774\ub529",level:3},{value:"\ud83d\udd17 Reference",id:"-reference",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"\ndata class Point(val x: Int, val y: Int) {}\n\n@Test\ninternal fun pairTestFail() {\n    val pair1 = Pair(5, 10)\n    val pair2 = Pair(22, 25)\n    // highlight-next-line\n    println(pair1 + pair2) // error occur\n}\n")),(0,a.kt)("p",null,"This code may lead to error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Kotlin: Unresolved reference. None of the following candidates is applicable because of receiver type mismatch: \n    public inline operator fun BigDecimal.plus(other: BigDecimal): BigDecimal defined in kotlin\n")),(0,a.kt)("p",null,"=> plus \uac00 operator \uc911 \ud558\ub098\uc784\uc744 \uc54c \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Point(val x: Int, val y: Int) {\n    // highlight-next-line\n    operator fun plus(anotherPoint: Point) = Point(x + anotherPoint.x, y + anotherPoint.y)\n}\n    @Test\n    internal fun pointPlusSuccessTest() {\n        val point1 = Point(5, 10)\n        val point2 = Point(22, 25)\n        println(point1 + point2) // Point(x=27, y=35)\n    }\n")),(0,a.kt)("h3",{id:"\uc8fc\uc694-\uc5f0\uc0b0\uc790-\ubaa9\ub85d"},"\uc8fc\uc694 \uc5f0\uc0b0\uc790 \ubaa9\ub85d"),(0,a.kt)("p",null,"\ub2e4\uc74c operator \ub4e4\uc740 \ud2b9\uc815 \uae30\ud638\uc640 \ub9e4\ud551\ub41c\ub2e4."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"plus(+) & inus(-)"),(0,a.kt)("li",{parentName:"ul"},"times(*) & div(/)"),(0,a.kt)("li",{parentName:"ul"},"in(contains*()), !in(!contains())"),(0,a.kt)("li",{parentName:"ul"},"unaryPlus(+) & unaryMinus(-) ",(0,a.kt)("br",null),"\n\ubd80\ud638 \uc804\ud658 "),(0,a.kt)("li",{parentName:"ul"},"inc(++) & dec(--)")),(0,a.kt)("h3",{id:""}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"    @Test\n    internal fun pointContainSuccessTest() {\n\n        val point1 = Point(5, 10)\n        val point2 = Point(22, 25)\n        val points : List<Point> = listOf(point1, point2)\n\n        assertThat(points.contains(point1)).isTrue\n        assertThat(point1 in points).isTrue\n    }\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"in")," \uc774\ub77c\ub294 operator \ub294 \uc5b4\ub518\uac00\uc5d0 \uc624\ubc84\ub85c\ub529 \ub418\uc5b4\uc788\ub2e4. "),(0,a.kt)("h3",{id:"collectionskt"},"Collections.kt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface Collection<out E> : Iterable<E> {\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    //highlight-next-line\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n    // ..\n}\n\npublic interface List<out E> : Collection<E> {\n    // Overriding\n    // highlight-next-line\n    override fun contains(element: @UnsafeVariance E): Boolean\n    // ..\n}\n")),(0,a.kt)("p",null,"Iterable \uc744 \uc0c1\uc18d\ubc1b\uc740 \uceec\ub809\uc158 \uc911 \ud558\ub098\uc778 ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," \ub9ac\uc2a4\ud2b8\ub294 ",(0,a.kt)("inlineCode",{parentName:"p"},"contains()")," operator \ub97c \uc624\ubc84\ub85c\ub529 \ud588\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.\n=> \ud574\ub2f9 \uc6d0\uc18c\ub97c \uceec\ub809\uc158 \ub0b4\uc5d0\uc11c iteration \ud558\uba70 \ucc3e\ub294\ub370 \uc131\uacf5\ud55c\ub2e4\uba74 true"),(0,a.kt)("h2",{id:"-summary"},"\ud83d\udcdd Summary"),(0,a.kt)("h3",{id:"\uc5f0\uc0b0\uc790-\uc624\ubc84\ub85c\ub529"},"\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"operator")," \ud0a4\uc6cc\ub4dc\uc640 \ud568\uaed8 \uc624\ubc84\ub85c\ub529 \ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Define '-' operator\noperator minus(element: T) : T // ..\n")),(0,a.kt)("h3",{id:"\uc5f0\uc0b0\uc790-\uc624\ubc84\ub77c\uc774\ub529"},"\uc5f0\uc0b0\uc790 \uc624\ubc84\ub77c\uc774\ub529"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ovverride")," \ud0a4\uc6cc\ub4dc\uc640 \ud568\uaed8 \uc624\ubc84\ub77c\uc774\ub529 \ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun contains(element: @UnsafeVariance E): Boolean\n")),(0,a.kt)("p",null,"\ud2b9\uc815 +, -, / \uc640 \uac19\uc740 \uc5f0\uc0b0 \uae30\ud638\ub97c 'symbolic representation' \ub77c\uace0 \uce6d\ud558\ub294\ub370 ",(0,a.kt)("br",null),"\n\uc774 \uae30\ud638\uc640 \ub9e4\ud551\ub41c \uba54\uc18c\ub4dc\uba85\uc740 \ub2e4\uc74c \ub9c1\ud06c\uc5d0\uc11c \ubaa8\ub450 \ud655\uc778\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("h2",{id:"-reference"},"\ud83d\udd17 Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kotlinlang.org/docs/operator-overloading.html#property-delegation-operators"},"Operator overloading - kotlin docs"))))}u.isMDXComponent=!0}}]);