"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4726],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(y,o(o({ref:t},l),{},{components:n})):r.createElement(y,o({ref:t},l))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7064:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"Discriminate property",description:"How to discriminate type using literal type",tags:["typescript"],keywords:["typescript"],last_update:{date:new Date("2023-02-27T00:00:00.000Z")}},o=void 0,p={unversionedId:"typescript/discriminate-property",id:"typescript/discriminate-property",title:"Discriminate property",description:"How to discriminate type using literal type",source:"@site/docs/typescript/06-discriminate-property.md",sourceDirName:"typescript",slug:"/typescript/discriminate-property",permalink:"/docusaurus/docs/typescript/discriminate-property",draft:!1,editUrl:"https://milkcoke.github.io/docusaurus/docs/docs/typescript/06-discriminate-property.md",tags:[{label:"typescript",permalink:"/docusaurus/docs/tags/typescript"}],version:"current",lastUpdatedAt:1677456e3,formattedLastUpdatedAt:"Feb 27, 2023",sidebarPosition:6,frontMatter:{title:"Discriminate property",description:"How to discriminate type using literal type",tags:["typescript"],keywords:["typescript"],last_update:{date:"2023-02-27T00:00:00.000Z"}},sidebar:"tutorialSidebar",previous:{title:"Type Predicates",permalink:"/docusaurus/docs/typescript/type-predicates"},next:{title:"Why should we use `never` in switch case in typescript",permalink:"/docusaurus/docs/typescript/switch-case-tip"}},s={},c=[{value:"When to use",id:"when-to-use",level:2},{value:"Why to use",id:"why-to-use",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Example",id:"example",level:2}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"when-to-use"},"When to use"),(0,i.kt)("p",null,"Discriminate multiple types in one block codes. (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"if ~ else")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"switch - case")," statement)"),(0,i.kt)("h2",{id:"why-to-use"},"Why to use"),(0,i.kt)("p",null,"A lot of type exists, we need discriminating the type in condition statement. ",(0,i.kt)("br",null),"\nBut in union type made by interfaces , ",(0,i.kt)("inlineCode",{parentName:"p"},"instanceof")," is invalid, and using type-predicates provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"is")," , it's required much type checking functions."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We should discriminate multiple types in one function simply.")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Creating a literal property that is common across multiple types narrowing the type using literal property.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Champion {\n    hp: number;\n    level: number;\n}\ninterface Vladimir extends Champion{\n    name: 'Vladimir'\n}\n\ninterface Garen extends Champion{\n    name: 'Garen'\n}\n\ninterface Arii extends Champion{\n    name: 'Arii'\n}\n\ntype Champ = Vladimir | Garen | Arii;\n\nfunction getSpeech(champion: Champ) {\n    switch (champion.name) {\n        case 'Vladimir':\n            console.log(\"Mountain is colored with blood\");\n            break;\n        case 'Garen':\n            console.log(\"Noxus!!!\");\n            break;\n        case 'Arii':\n            console.log(\"I'll attract you\");\n            break;\n        default:\n            throw new Error(\"Unknown champion\")\n    }\n}\n\n// Typescript compiler say you should input discriminated property 'name' as literal type\n// If missing `name`, ts compiler warn you it's missing.\nconst defaultGarean : Garen = {\n    name: 'Garen',\n    level: 1,\n    hp: 550\n}\n\ngetSpeech(defaultGarean) /// \"Noxus!!\"\n")))}u.isMDXComponent=!0}}]);