"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1754],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var o=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(t),g=l,k=p["".concat(s,".").concat(g)]||p[g]||d[g]||a;return t?o.createElement(k,i(i({ref:n},u),{},{components:t})):o.createElement(k,i({ref:n},u))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=g;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[p]="string"==typeof e?e:l,i[1]=r;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=t(7462),l=(t(7294),t(3905));const a={title:"Singleton Pattern",description:"Why, When, How to use singleton pattern?",tags:["kotlin"],last_update:{date:new Date("2023-01-13T00:00:00.000Z")}},i="Singleton",r={unversionedId:"kotlin/syntax/Singleton",id:"kotlin/syntax/Singleton",title:"Singleton Pattern",description:"Why, When, How to use singleton pattern?",source:"@site/docs/kotlin/01-syntax/08-Singleton.md",sourceDirName:"kotlin/01-syntax",slug:"/kotlin/syntax/Singleton",permalink:"/docusaurus/docs/kotlin/syntax/Singleton",draft:!1,editUrl:"https://milkcoke.github.io/docusaurus/docs/docs/kotlin/01-syntax/08-Singleton.md",tags:[{label:"kotlin",permalink:"/docusaurus/docs/tags/kotlin"}],version:"current",lastUpdatedAt:1673568e3,formattedLastUpdatedAt:"2023\ub144 1\uc6d4 13\uc77c",sidebarPosition:8,frontMatter:{title:"Singleton Pattern",description:"Why, When, How to use singleton pattern?",tags:["kotlin"],last_update:{date:"2023-01-13T00:00:00.000Z"}},sidebar:"tutorialSidebar",previous:{title:"Operator overloading, overriding",permalink:"/docusaurus/docs/kotlin/syntax/operator-overloading"},next:{title:"Create a Page",permalink:"/docusaurus/docs/kotlin/create-a-page"}},s={},c=[{value:"Why to use?",id:"why-to-use",level:2},{value:"When to use?",id:"when-to-use",level:2},{value:"How to use?",id:"how-to-use",level:2},{value:"old java solution",id:"old-java-solution",level:3},{value:"Simple kotlin solution",id:"simple-kotlin-solution",level:3},{value:"object",id:"object",level:3},{value:"companion object",id:"companion-object",level:3},{value:"Double Check Locking",id:"double-check-locking",level:3},{value:"Bill Pugh Solution (Recommended)",id:"bill-pugh-solution-recommended",level:3},{value:"BillPughSingletonTest.kt",id:"billpughsingletontestkt",level:4},{value:"\ud83d\udcdd Conclusion",id:"-conclusion",level:2},{value:"\ud83d\udd17 Reference",id:"-reference",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"singleton"},"Singleton"),(0,l.kt)("h2",{id:"why-to-use"},"Why to use?"),(0,l.kt)("p",null,"Enable handling global state force to use single instance."),(0,l.kt)("h2",{id:"when-to-use"},"When to use?"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Ensure just only one instance existence"),(0,l.kt)("li",{parentName:"ol"},"Handle global state")),(0,l.kt)("p",null,"ex) Logging, Network state manager"),(0,l.kt)("h2",{id:"how-to-use"},"How to use?"),(0,l.kt)("h3",{id:"old-java-solution"},"old java solution"),(0,l.kt)("p",null,"This is not recommended because ",(0,l.kt)("strong",{parentName:"p"},"It's not ensuring single instance in multi-thread environment.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public class Singleton {\n    private static Singleton instance;\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if(instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n\n    // etc methods..\n}\n")),(0,l.kt)("p",null,"This code is not thread-safe."),(0,l.kt)("p",null,"Assume your environment is in dual thread env consists of Thread A, B \\\nThread B make new Singleton instance even though thread A already made one."),(0,l.kt)("h3",{id:"simple-kotlin-solution"},"Simple kotlin solution"),(0,l.kt)("h3",{id:"object"},"object"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"object")," for ensuring thread safe."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"object Singleton {\n    // ...\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'object MySingleton {\n    val Priority = 3\n    fun myPriority() : String = "Hello"\n}\n\nclass SingleTonPatternTest {\n    @Test\n    internal fun testMySingleTon() {\n        assertThat(MySingleton.Priority).isEqualTo(3)\n        assertThat(MySingleton.myPriority()).isEqualTo("Hello")\n    }\n}\n')),(0,l.kt)("p",null,"But ",(0,l.kt)("inlineCode",{parentName:"p"},"object")," solution can't have parameter on constructor ",(0,l.kt)("br",null),"\nIf you want to pass parameter, Use ",(0,l.kt)("inlineCode",{parentName:"p"},"companion object"),". "),(0,l.kt)("h3",{id:"companion-object"},"companion object"),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"companion object")," with parameter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MySingleton private constructor(context: Context) {\n    companion object {\n        private var instance: MySingleton? = null\n        \n        fun getInstance(context: Context) : MySingleton {\n            return instance ?: MySingleton(context).also {instance = it}\n        }\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Not yet resolved multi-thread synchronization issue.")),(0,l.kt)("h3",{id:"double-check-locking"},"Double Check Locking"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MySingleton private constructor(context: Context) {\n    companion object {\n        @Volatile\n        private var instance: MySingleton? = null\n        \n        fun getInstance(context: Context) : MySingleton {\n            // 1. null check\n            // 2. locking\n            // highlight-next-line\n            instance ?: synchronized(MySingleton::class.java) {\n                instance ?: MySingleton(context).also { instance = it }\n            }\n        }\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"This solution ensures thread-safe")," "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@Volatile")," enable each thread can access directly to main memory variable. ",(0,l.kt)("br",null),"\nIn this code, that's instance. However, this is possibility of performance degradation because of locking."),(0,l.kt)("h3",{id:"bill-pugh-solution-recommended"},"Bill Pugh Solution (Recommended)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"object MySingleton {\n    val instance: MySingleton by lazy {Holder.instance}\n    private object Holder {\n        val instance = MySingleton\n    }\n}\n")),(0,l.kt)("h4",{id:"billpughsingletontestkt"},"BillPughSingletonTest.kt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"    @Test\n    internal fun testBillPughSingletonTest() {\n        val firstInstance = MySingleton.instance\n        val secondInstance = MySingleton.instance\n        Assertions.assertThat(firstInstance).isEqualTo(secondInstance) // \u2705\n        Assertions.assertThat(firstInstance).isSameAs(secondInstance)  // \u2705 \n    }\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Initialized!\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"In java, use ",(0,l.kt)("inlineCode",{parentName:"p"},"static final")," keyword instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"object"))),(0,l.kt)("p",null,"This  is awesome solution."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Thread-safe"),(0,l.kt)("li",{parentName:"ol"},"Avoid performance degradation"),(0,l.kt)("li",{parentName:"ol"},"Instance lazy loading ",(0,l.kt)("br",null),"\nInstance is not loaded until ",(0,l.kt)("inlineCode",{parentName:"li"},"MySingleton.instance")," is called.")),(0,l.kt)("h2",{id:"-conclusion"},"\ud83d\udcdd Conclusion"),(0,l.kt)("p",null,"Use Bill Pugh solution when you should use singleton pattern if you don't need a constructor parameter passing."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-reference"},"\ud83d\udd17 Reference"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://blog.mindorks.com/how-to-create-a-singleton-class-in-kotlin/"},"How to create a singleton class in kotlin"))))}p.isMDXComponent=!0}}]);