"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),c=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=c(e.components);return o.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(f,l(l({ref:t},i),{},{components:n})):o.createElement(f,l({ref:t},i))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8038:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={title:"Custom class for delegation",description:"Know about how to define custom delegation class",tags:["kotlin"],keywords:["kotlin"],last_update:{date:new Date("2023-02-04T00:00:00.000Z")}},l=void 0,s={unversionedId:"kotlin/delegate/custom-delegate-class",id:"kotlin/delegate/custom-delegate-class",title:"Custom class for delegation",description:"Know about how to define custom delegation class",source:"@site/docs/kotlin/02-delegate/03-custom-delegate-class.md",sourceDirName:"kotlin/02-delegate",slug:"/kotlin/delegate/custom-delegate-class",permalink:"/docusaurus/docs/kotlin/delegate/custom-delegate-class",draft:!1,editUrl:"https://milkcoke.github.io/docusaurus/docs/docs/kotlin/02-delegate/03-custom-delegate-class.md",tags:[{label:"kotlin",permalink:"/docusaurus/docs/tags/kotlin"}],version:"current",lastUpdatedAt:1675468800,formattedLastUpdatedAt:"Feb 4, 2023",sidebarPosition:3,frontMatter:{title:"Custom class for delegation",description:"Know about how to define custom delegation class",tags:["kotlin"],keywords:["kotlin"],last_update:{date:"2023-02-04T00:00:00.000Z"}},sidebar:"tutorialSidebar",previous:{title:"delegate by map",permalink:"/docusaurus/docs/kotlin/delegate/map-delegate"},next:{title:"FileIO",permalink:"/docusaurus/docs/category/fileio"}},u={},c=[{value:"When to use custom delegate class?",id:"when-to-use-custom-delegate-class",level:2},{value:"Example code",id:"example-code",level:3}],i={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"when-to-use-custom-delegate-class"},"When to use custom delegate class?"),(0,r.kt)("p",null,"Centralize the implementation of a property and make it more reusable and easier to maintain. ",(0,r.kt)("br",null),"\nThis way, you can reduce duplicated code"),(0,r.kt)("p",null,"Imagine you should logging property read count. ",(0,r.kt)("br",null),"\nIf you define custom ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," per every property, there should occur duplicates code."),(0,r.kt)("h3",{id:"example-code"},"Example code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class ReadCountTest {\n    class AutoIncrementCount {\n        private var count: Int = 0\n        operator fun getValue(thisRef: Any?, property: KProperty<*>): Int {\n            ++count\n            return count\n        }\n        // not defined 'setValue()' method\n        // so this is for value property.\n    }\n\n    class Board() {\n        // highlight-next-line\n        val readCount: Int by AutoIncrementCount()\n    }\n\n    @DisplayName(\"property read count\")\n    @Test\n    internal fun testCount() {\n        val board = Board()\n        assertEquals(1, board.readCount)\n        assertEquals(2, board.readCount)\n        assertEquals(3, board.readCount)\n    }\n}\n")))}d.isMDXComponent=!0}}]);