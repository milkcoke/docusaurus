"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),k=r,m=u["".concat(s,".").concat(k)]||u[k]||d[k]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={title:"Type Casting",description:"Introduce type casting in kotlin.",tags:["kotlin"],keywords:["kotlin"],last_update:{date:new Date("2023-01-10T00:00:00.000Z")}},i="Introduction",o={unversionedId:"kotlin/default-syntax/Type-Casting",id:"kotlin/default-syntax/Type-Casting",title:"Type Casting",description:"Introduce type casting in kotlin.",source:"@site/docs/kotlin/01-default-syntax/03-Type-Casting.md",sourceDirName:"kotlin/01-default-syntax",slug:"/kotlin/default-syntax/Type-Casting",permalink:"/docusaurus/docs/kotlin/default-syntax/Type-Casting",draft:!1,editUrl:"https://milkcoke.github.io/docusaurus/docs/docs/kotlin/01-default-syntax/03-Type-Casting.md",tags:[{label:"kotlin",permalink:"/docusaurus/docs/tags/kotlin"}],version:"current",lastUpdatedAt:1673308800,formattedLastUpdatedAt:"2023\ub144 1\uc6d4 10\uc77c",sidebarPosition:3,frontMatter:{title:"Type Casting",description:"Introduce type casting in kotlin.",tags:["kotlin"],keywords:["kotlin"],last_update:{date:"2023-01-10T00:00:00.000Z"}},sidebar:"tutorialSidebar",previous:{title:"Access Modifier",permalink:"/docusaurus/docs/kotlin/default-syntax/accessor-modifier"},next:{title:"Pair and Triple in Kotlin",permalink:"/docusaurus/docs/kotlin/default-syntax/Pair-Triple"}},s={},c=[{value:"Any",id:"any",level:2},{value:"Unsafe casting",id:"unsafe-casting",level:2},{value:"Safe Casting",id:"safe-casting",level:2},{value:"Avoid <code>ClassCastException</code> with <code>as?</code> keyword",id:"avoid-classcastexception-with-as-keyword",level:3},{value:"You have to consider receiver variable has <code>null</code> value when cast failed.",id:"you-have-to-consider-receiver-variable-has-null-value-when-cast-failed",level:4},{value:"\ud83d\udcdd Summary",id:"-summary",level:2},{value:"\ud83d\udd17 Reference",id:"-reference",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Type casting is the process of converting a variable data type from one to another."),(0,r.kt)("p",null,"Keep in mind that type casting operation is error-prone one. ",(0,r.kt)("br",null),"\nThis is why you learn about casting operation. If not, fatal error or exception would occur."),(0,r.kt)("h2",{id:"any"},"Any"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Any")," is the root of the Kotlin class, which means that every Kotlin class has ",(0,r.kt)("inlineCode",{parentName:"p"},"Any")," as a parent class. ",(0,r.kt)("br",null),"\nIn other terms, any Kotlin variable can have ",(0,r.kt)("inlineCode",{parentName:"p"},"Any")," as a type."),(0,r.kt)("h2",{id:"unsafe-casting"},"Unsafe casting"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"as")," keyword for unsafe casting"),(0,r.kt)("p",null,"Let me show you explicit unsafe casting using ",(0,r.kt)("inlineCode",{parentName:"p"},"as"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val num : Any = 42\n// highlight-next-line\nval str1 : String = num as String\nprintln(str1)    \n")),(0,r.kt)("p",null,"This code would lead to following error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'Exception in thread "main" java.lang.ClassCastException: \n    class java.lang.Integer cannot be cast to class java.lang.String\n')),(0,r.kt)("p",null,"Similarly, the ",(0,r.kt)("inlineCode",{parentName:"p"},"as")," cast operator should fail when nullable types are involved, as shown below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val num : Any? = null\n// highlight-next-line\nval str1 : String = num as String\nprintln(str1)   \n")),(0,r.kt)("p",null,"So, everytime you perform an explicit unsafe cast through the ",(0,r.kt)("inlineCode",{parentName:"p"},"as")," operator ",(0,r.kt)("br",null),"\nYou should consider that a ",(0,r.kt)("inlineCode",{parentName:"p"},"ClassCastException")," might be thrown. ",(0,r.kt)("br",null),"\nIf you want to prevent this error from crashing your application, you must handle it as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val num : Any? = null\ntry {\n    val str1: String = num as String\n    println(str1)\n} catch (e: ClassCastException) {\n    println("Cast failed!")\n} \n')),(0,r.kt)("h2",{id:"safe-casting"},"Safe Casting"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"as?")," cast operator is called safe because it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," when the cast can't be performed. ",(0,r.kt)("br",null),"\nIn other words, it's considered safe because it allows you to avoid exceptions, returning ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," on failure."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"as?")," operator allow receiver variable should always be nullable when casting fails."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val champ : Any = "khazix"\n// highlight-next-line\nval str1 : String = champ as? String\nprintln(str1)\n')),(0,r.kt)("p",null,"This code would lead to following error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Kotlin: Type mismatch: inferred type is String? but String was expected\n")),(0,r.kt)("p",null,"Because str1 doesn't have a nullable type. \\\nTo make it work, all you have to do it declare str1 as ",(0,r.kt)("inlineCode",{parentName:"p"},"String?"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val champ : Any = "khazix"\n// highlight-next-line\nval str1 : String? = champ as? String\nprintln(str1)\n')),(0,r.kt)("h3",{id:"avoid-classcastexception-with-as-keyword"},"Avoid ",(0,r.kt)("inlineCode",{parentName:"h3"},"ClassCastException")," with ",(0,r.kt)("inlineCode",{parentName:"h3"},"as?")," keyword"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"var num: Any = 42\nval str1: String? = num as? String\nprintln(str1)\n")),(0,r.kt)("p",null,"This would no longer fail. it would print:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"null\n")),(0,r.kt)("p",null,"You can avoid ",(0,r.kt)("inlineCode",{parentName:"p"},"ClassCastException")," even though fail since 'Integer' can't be cast to 'String'. ",(0,r.kt)("br",null),"\nSo the ",(0,r.kt)("inlineCode",{parentName:"p"},"try ~ catch")," statement is no longer required when using ",(0,r.kt)("inlineCode",{parentName:"p"},"as?")," the safe cast operator."),(0,r.kt)("h4",{id:"you-have-to-consider-receiver-variable-has-null-value-when-cast-failed"},"You have to consider receiver variable has ",(0,r.kt)("inlineCode",{parentName:"h4"},"null")," value when cast failed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val str1: String? = num as? String\n\nif (str1 == null) {\n    // Cast failed!\n} else {\n    // Cast succeeded!    \n}\n")),(0,r.kt)("h2",{id:"-summary"},"\ud83d\udcdd Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"as")," operator only when you can make sure the cast will be successful. ",(0,r.kt)("br",null),"\nFor example when casting a type to its supertype in an inheritance hierarchy.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"as?")," operator with handling null-checking code.\nYour application wouldn't be shut down even type casting fails. ",(0,r.kt)("br",null),"\nHowever, required how to deal with them."))),(0,r.kt)("h2",{id:"-reference"},"\ud83d\udd17 Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.logrocket.com/type-casting-kotlin-unsafe-vs-safe/"},"Type casting kotlin safe vs unsafe")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kotlinlang.org/docs/typecasts.html#unsafe-cast-operator"},"Kotlin official docs"))))}u.isMDXComponent=!0}}]);