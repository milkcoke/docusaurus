"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6025],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,k=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"Backing property",description:"How to use backing field and property with `lazy`",tags:["kotlin"],last_update:{date:new Date("2023-01-12T00:00:00.000Z")}},l=void 0,o={unversionedId:"kotlin/syntax/Backing-Property",id:"kotlin/syntax/Backing-Property",title:"Backing property",description:"How to use backing field and property with `lazy`",source:"@site/docs/kotlin/01-syntax/06-Backing-Property.md",sourceDirName:"kotlin/01-syntax",slug:"/kotlin/syntax/Backing-Property",permalink:"/docusaurus/docs/kotlin/syntax/Backing-Property",draft:!1,editUrl:"https://milkcoke.github.io/docusaurus/docs/docs/kotlin/01-syntax/06-Backing-Property.md",tags:[{label:"kotlin",permalink:"/docusaurus/docs/tags/kotlin"}],version:"current",lastUpdatedAt:1673481600,formattedLastUpdatedAt:"2023\ub144 1\uc6d4 12\uc77c",sidebarPosition:6,frontMatter:{title:"Backing property",description:"How to use backing field and property with `lazy`",tags:["kotlin"],last_update:{date:"2023-01-12T00:00:00.000Z"}},sidebar:"tutorialSidebar",previous:{title:"const vs val",permalink:"/docusaurus/docs/kotlin/syntax/const-vs-val"},next:{title:"Operator overloading, overriding",permalink:"/docusaurus/docs/kotlin/syntax/operator-overloading"}},s={},p=[{value:"Backing Field",id:"backing-field",level:2},{value:"How to solve this problem?",id:"how-to-solve-this-problem",level:3},{value:"Backing Property",id:"backing-property",level:2},{value:"Without backing property",id:"without-backing-property",level:3},{value:"Backing property",id:"backing-property-1",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Reference",id:"reference",level:2}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"backing-field"},"Backing Field"),(0,r.kt)("p",null,"\uc2e4\uc81c\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uc788\uc73c\ub098 \uc678\ubd80\uc5d0\uc11c \uc9c1\uc811 \uc218 \uc5c6\ub294 field. ",(0,r.kt)("br",null),"\n\uc624\ub85c\uc9c0 ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," \uba54\uc18c\ub4dc\ub85c\ub9cc \ucee8\ud2b8\ub864 \ud560 \uc218 \uc788\ub2e4."),(0,r.kt)("p",null,"Backing field includes initialized property with value.\nKotlin generates  ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," automatically declaring public variable using variable name"),(0,r.kt)("p",null,"You must avoid use same variable name in ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," as shown below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Human() {\n    var name = "khazix"\n        get() {\n            // highlight-start\n            println("name is $name")\n            return name\n            // highlight-end\n        }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f This code throw ",(0,r.kt)("inlineCode",{parentName:"p"},"stackOverflowError")," ",(0,r.kt)("br",null),"\nsince call each other infinitely in ",(0,r.kt)("inlineCode",{parentName:"p"},"get()"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"getter naming",src:n(6205).Z,width:"369",height:"211"})),(0,r.kt)("h3",{id:"how-to-solve-this-problem"},"How to solve this problem?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use Backing field with ",(0,r.kt)("inlineCode",{parentName:"strong"},"field")," keyword")," instead of field name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Human() {\n    var name = "khazix"\n        get() {\n            // `field` keyword stores the value of `name` property\n            println("name is $field") \n            return field\n        }\n}\n')),(0,r.kt)("p",null,"Backing field ",(0,r.kt)("inlineCode",{parentName:"p"},"field")," keyword is used only in ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," method."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"backing-property"},"Backing Property"),(0,r.kt)("p",null,"\uc678\ubd80\ub85c\ubd80\ud130 \uc811\uadfc \uac00\ub2a5\ud55c property \ub0b4\ubd80 \ub3d9\uc791\uc740 Backing field \ub97c \ud1b5\ud574 \uad6c\ud604\ud55c\ub2e4."),(0,r.kt)("h3",{id:"without-backing-property"},"Without backing property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class CustomerWithoutBacking(val name: String) {\n    val messages = mutableListOf<String>()\n\n    fun addMessage(message: String) {\n        this.messages.add(message)\n    }\n    \n    @Test\n    internal fun `load message without backing property`() {\n        val customer = CustomerWithoutBacking("Karma")\n        customer.addMessage("\ud558\ub098 \ub458 \uc14b")\n        // highlight-next-line\n        customer.messages.clear() // Accidential deletion of data.\n    }\n}\n')),(0,r.kt)("h2",{id:"backing-property-1"},"Backing property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Customer(val name: String) {\n    // Backing field\n    private var _messages: MutableList<String>? = null\n\n    // Backing Property\n    val messages: MutableList<String>\n        get() {\n            if (_messages == null) {\n                _messages = loadMessages()\n            }\n            return _messages!!\n        }\n\n    fun addMessage(message: String) {\n        this.messages.add(message)\n    }\n    \n    private fun loadMessages(): MutableList<String> =\n        mutableListOf(\n            "Initial Contact",\n            "Convinced them to use kotlin",\n            "Sold traning class. Sweet.",\n        ).also { println("Loaded messages.") }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'    @Test\n    internal fun `load message`() {\n        val customer = Customer("Falcon")\n        customer.addMessage("NNNNNKKK")\n        // Call also { println("Loaded messages.") }\n        println(customer.messages) \n        customer.addMessage("Go Kotlin")\n        // also statement is not called.\n        println(customer.messages) \n    }\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Test code result",src:n(5325).Z,width:"1886",height:"408"})),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Backing field support ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," mechanism. ",(0,r.kt)("br",null),"\nYou can set custom method with ",(0,r.kt)("inlineCode",{parentName:"p"},"field")," keyword."),(0,r.kt)("p",null,'Backing property is used when want to do something that does not fit into this "implicit backing field" scheme. '),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kotlinlang.org/docs/properties.html#backing-fields"},"Backing fields and property - kotlin docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=H5TYt3ZlS0Q"},"Backing fields"))))}d.isMDXComponent=!0},6205:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2023-01-12_getter-4ca85bf0044662bfe154ddea8fc4f5f4.png"},5325:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2023-01-12_test_code_result-d8f69250b3e5b2b798fc4bac1b3730fa.png"}}]);